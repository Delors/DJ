# Applies basic transformations to a real world dictionary to
# generate base words for passwords.

# We want to handle, e.g., the following situations:

# Input: 
#   Frankfurt an der Oder
# Output:  
#   FrankfurtanderOder
#   Frankfurt
#   Oder
#   frankfurtanderoder
#   frankfurt
#   Frankfurt Oder
#   frankfurt oder
#   FrankfurtOder
#   frankfurtoder
#   Frankfurtoder
#   
# Input: 
#   Vladimir PAVEL
# Output: 
#   VladimirPavel
#   Vladimir        
#   Pavel
#   VPavel
#
# Input:
#   Militär
# Output:
#   Militär
#   Militaer
#   Militar
#
# Input:
#   Achkhoj-Martanovskij Rajon
# Output:
#   Achkhoj-MartanovskijRajon
#   Achkhoj-Martanovskij
#   Rajon
#   achkhoj-martanovskijrajon
#   achkhoj-martanovskij
#   rajon
#   AchkhojMartanovskijRajon
#   Achkhoj
#   Martanovskij
#   achkhojmartanovskijrajon
#   achkhoj
#   martanovskij
#   AchkhojMartanovskij
#   achkhojmartanovskij
#   AchkhojMartanovskij Rajon
#   achkhojmartanovskij rajon
#   Achkhojmartanovskij Rajon
#   Achkhojmartanovskijrajon
#   Achkhoj Rajon
#   achkhoj rajon
#   AchkhojRajon
#   achkhojrajon
#   Achkhojrajon

# GENERAL FILTER
ignore "ignore/de.txt"
ignore "ignore/en.txt"
ignore "ignore/es.txt"
ignore "ignore/fr.txt"

# Operations
# An operation processes a given entry; in particular performs a filter, 
# transform, or extract operation.
# In general, entries which are unchanged by a transformer
# are filtered.
# - A "+" directly in front of the operation will ensure that the 
#   original entry is passed on to the next step.
# - A "*" directly in front of the transformer or extractor operation 
#   will ensure that the current entry-set is passed on if and only 
#   if it is not applicable.
# - A "!" directly in front of a filter operation will pass on the original
#   entry if it was filtered and vice versa.
# - A "~" directly in front of a filter passes on the entry if and only if
#   it was filtered or not applicable.

set BASE

# DEFINITIONS OF MACROS
def UMLAUT_TO_ASCII replace "replace/UmlautToAscii.txt"
def REWRITE_UMLAUT replace "replace/RewriteUmlaut.txt"
def HANDLE_UMLAUT +do UMLAUT_TO_ASCII *do REWRITE_UMLAUT

def SC_TO_SPACE replace "replace/SpecialCharToSpace.txt"

{ *do HANDLE_UMLAUT  }> BASE

use BASE \
    *strip_ws \    
    +remove_sc \
    +remove_no \
    +do SC_TO_SPACE \
    +lower \        
    +split " " \
    *remove_ws \
    report

# Does two things:
# 1) Converts names where the surname is given in capital letters to the
#    standard format. E.g., Vladimir PAVEL => Vladimir Pavel;
#    however, we do not want to convert entries that are seemingly not names,
#    e.g., for an entry such as "HiHo ALLE", we do not want to change the 
#    capitalization of "HiHo". Therefore, `split " " *title ilist_concat report` 
#    wouldn't work.
# 2) Splits up terms implicitly removes fill words and reconnects them.
#    I.e., Frankfurt an der Oder => Frankfurt Oder
use BASE \
    *strip_ws *remove_no *remove_sc  split " " \
    ~ilist_foreach( max lower 0 min upper 1 capitalize ) ilist_concat " " \
    +remove_ws \
    +title \
    +lower \
    report

use BASE\
    split " " \
    *find_all "([A-Z][a-z]+)-" \
    ilist_concat " "\
    +remove_ws \
    +title \
    +lower \
    report
