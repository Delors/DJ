# The goal of this script is to identify passwords that maybe reused; 
# i.e., passwords which have a reasonable chance of being reused by
# other persons, because they are not (pseudo-)randomly generated or
# too heavily modified.
# Please note that the classification is too some degree opionated, but
# this will not affect the final dictionary.

config is_regular_word  DICTIONARIES    ["en","de","fr","es","nl","pt"]

# The signature numbers list also contains comments that we need/want
# to filter.
global_set SIGNATURE_NUMBERS "glist/signature_numbers.txt"( 
        find_all "^[0-9]+$" 
)

def IS_WORD or( is_popular_word, is_regular_word )

set BASE
set NO_SEQ
set NO_PATTERN
set NO_WALK
set NO_DATE
set NO_SIGNATURE_NUMBER
set NO_NUMBER
set NO_REGULAR_WORD
set NO_POPULAR_WORD
set UNIDENTIFIED
set NO_DUPLICATE
set NO_DUPLICATE_REVERSED
set NO_TRIPLICATE
set NO_TRIVIAL_MULTI_WORD
set NO_MULTI_WORD
set NO_CORE
set NO_SENTENCE
set NOT_REUSABLE

# We only care about passwords with a certain length.
{ max length 32 }> BASE


#identify emails
#identify addresses (Burgweg 29a)
#Split-up on Capital words and selected special chars boundary
#deleetify (light)
#strip sc

# Let's identify "pure" sequences (i.e., sequence without some special
# prepended or appended character(s))
use BASE { 
    ilist_if_any( 
        *lower \
        or( is_part_of "abcdefghijklmnopqrstuvwxyz",
            is_part_of "zyxwvutsrqponmlkjihgfedcba",
            is_part_of "aeiou",
            is_part_of "1234567890",
            is_part_of "0987654321"
        ) 
    ) \
    classify "sequence, " \
    result 
}[]> NO_SEQ

# Let's identify "pure" walks
use NO_SEQ {
    ilist_if_any( 
        *lower \
        or(
            is_walk "KEYBOARD_DE",
            is_walk "KEYBOARD_EN",
            is_walk "PIN_PAD",
            is_walk "NUM_PAD"
        )
    ) \
    classify "walk, " \
    result
}[]> NO_WALK

# Let's get signature "numbers"
use NO_WALK {
    glist_in SIGNATURE_NUMBERS \
    classify "signature_number, " \
    result
}[]> NO_SIGNATURE_NUMBER

# Let's identify "potential" dates
use NO_SIGNATURE_NUMBER {
    ilist_if_any(
        find_all "^[0-9.-/]+$" \ 
        mangle_dates 
    ) \
    classify "date, " \
    result
}[]> NO_DATE

use NO_DATE {
    find_all "^[0-9]+$" \
    classify "number, " \
    result
}/> NO_NUMBER

# Let's identify patterns
use NO_NUMBER { 
    ilist_if_any( 
        min length 6 *lower is_pattern 
    ) \
    classify "pattern, "  \
    result
}[]> NO_PATTERN

# Let's identify regular words
use NO_PATTERN {
    is_regular_word \
    classify "regular word, " \
    result   
}[]> NO_REGULAR_WORD

# Let's identify popular words
use NO_REGULAR_WORD {
    is_popular_word \
    classify "popular word, " \
    result
}[]> NO_POPULAR_WORD

# identify compound words
use NO_POPULAR_WORD {
    max non_letter 0 \ 
    break_up(do IS_WORD) \
    classify "compound word, " \
    result
}/[]> UNIDENTIFIED

# The restart operation updates the restart context, which consists of 
# the restart operation and the original entry (entry "<entry>"); i.e., 
# the restart context is put on a stack! 
# However, a restart is only performed for those entries which pass the
# filter operation. I.e. it is the task of the user to ensure that the 
# restart operation will terminate eventually terminate.

use UNIDENTIFIED \
    { 
        restart(
            min length 8,
            deduplicate
        )
    }/[]> NO_DUPLICATE

use NO_DUPLICATE \
    {
        restart(
            min length 8,
            deduplicate_reversed
        )
    }/[]> NO_DUPLICATE_REVERSED

use NO_DUPLICATE_REVERSED \
    {
        restart(
            min length 9,
            detriplicate
        )
    }/[]> NO_TRIPLICATE

use NO_TRIPLICATE \
    { 
        ilist_ratio joined < 1.33 ( 
            split " ",
            restart 1(
                min length 8, 
                split " "
            )
        )
    }/[]> NO_SENTENCE

use NO_SENTENCE \
    {
        ilist_ratio joined < 2.01 ( 
            _ , 
            restart 1(
                min length 6,
                find_all "([A-Z]?[a-z]{1,})|([0-9]+)" \
                ilist_max length 5
            ) 
        ) 
    }/> NO_TRIVIAL_MULTI_WORD


# When we have a letter sequence, let's test if it
# contains of multiple words
#use NO_TRIVIAL_MULTI_WORD \
#    {
#       ???
#    }/[]> NO_MULTI_WORD

use NO_TRIVIAL_MULTI_WORD \
    {
        restart 1(
            min length 5,
            ilist_ratio joined < 1.5 (
                _,
                strip_no_and_sc
            )
        )
    }/[]> NO_CORE

use NO_CORE \
    {
        restart 1(min length 5, cut r 1 1)
    }/[]> NOT_REUSABLE

use NOT_REUSABLE classify "not reusable: "