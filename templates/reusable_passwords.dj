# The goal of this script is to identify passwords that maybe reused; 
# i.e., passwords which have a reasonable chance of being reused by
# other persons, because they are not (pseudo-)random generated or
# too heavily modified.
# Please note that the classification is too some degree opionated, but
# this will not affect the final dictionary.

config is_regular_word  DICTIONARIES    ["en","de","fr","es","nl","pt"]

global_set SIGNATURE_NUMBERS "glist/signature_numbers.txt"( 
        find_all "^[0-9]*$" 
)

set BASE
set NO_SEQ
set NO_PATTERN
set NO_WALK
set NO_DATE
set NO_SIGNATURE_NUMBER
set NO_NUMBER
set NO_REGULAR_WORD


# We only care about passwords with a certain length.
{ min length 4 max length 24 }> BASE

# Let's identify "pure" sequences (i.e., sequence without some special
# prepended or appended character(s))
use BASE { 
    ilist_if_any( 
        *lower \
        or( is_part_of "abcdefghijklmnopqrstuvwxyz",
            is_part_of "zyxwvutsrqponmlkjihgfedcba",
            is_part_of "1234567890",
            is_part_of "0987654321"
        ) 
    ) classify "[sequence]" 
}[]> NO_SEQ

# Let's identify "pure" patterns
use NO_SEQ { 
    ilist_if_any( 
        min length 6 *lower is_pattern 
    ) classify "[pattern]"  \
}[]> NO_PATTERN

# Let's identify "pure" walks
use NO_PATTERN {
    ilist_if_any( 
        *lower \
        or(
            is_walk "KEYBOARD_DE",
            is_walk "KEYBOARD_EN",
            is_walk "PIN_PAD",
            is_walk "NUM_PAD"
        )
    ) classify "[walk]"
}[]> NO_WALK

# Let's get signature "numbers"
use NO_WALK {
    glist_in SIGNATURE_NUMBERS \
    classify "[signature_number]"
}[]> NO_SIGNATURE_NUMBER

# Let's identify "potential" dates
use NO_SIGNATURE_NUMBER {
    ilist_if_any( 
        mangle_dates 
    ) classify "[date]"
}[]> NO_DATE

# Let's collect the "unknown numbers"
use NO_DATE {
    max non_numeric 0 \
    get_no \
    classify "[unknown_number]"
}/[]> NO_NUMBER

# Let's identify regular words
use NO_NUMBER {
    is_regular_word \
    classify "[regular word]"    
}[]> NO_REGULAR_WORD

# Let's identify popular words
use NO_REGULAR_WORD {
    is_popular_word \
    classify "[popular word]"
}[]> NO_POPULAR_WORD